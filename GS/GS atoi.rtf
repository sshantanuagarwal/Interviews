{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /* Problem Name is &&& atoi &&& PLEASE DO NOT REMOVE THIS LINE. */\
\
/**\
 * Instructions to candidate.\
 *  1) Run this code in the REPL to observe its behaviour. The\
 *     execution entry point is main().\
 *  2) There are bugs in the implementation of atoi(). Consider\
 *     adding some relevant tests.\
 *  3) Correct the implementation of atoi(). Feel free to use\
 *     print-style debugging in the absence of a true debugger.\
 *  4) If time permits, consider adding robustness to atoi().\
 *     For example, what type of input checking would be useful?\
 */\
\
\
public class Solution\
\{\
  /**\
   * Takes a string str and returns the int value represented by\
   * the string. For example, atoi("42") returns 42.\
   */\
  public static int atoiInt(String str)\
  \{\
    int result = 0;\
    int strLength = str.length();\
    if(strLength <= 0 ) \{\
      System.out.println("Empty String");\
      return result;\
    \}\
    boolean isNegative = false;\
    int startIndex = 0;\
    if(str.charAt(0) == '-')  \{\
       isNegative = true;\
       startIndex = 1;\
    \}\
\
    for(int i = startIndex; i < strLength; i++) \{\
      char c = str.charAt(i);\
      if(c== ' ')\
          continue;\
      if(c >= '0' && c <= '9')\
        result = result * 10 + (str.charAt(i) -'0');\
      else \{\
        System.out.println("Invalid String");\
        return result;\
      \}\
    \}\
    if(isNegative == true) \{\
      return -1 * result;\
    \}\
    return result;\
  \}\
\
  public static double atoiDec(String str)\
  \{\
    double result = 0.0;\
    \
    int index = str.indexOf('.');\
    String sub1 = str.substring(0, index);\
    String sub2 = str.substring(index+1, str.length());\
    \
    int result1 = atoiInt(sub1);\
    int result2 = atoiInt(sub2);\
    result = result1 + ( result2 * Math.pow(10, -1* sub2.length() ) );\
    return result;\
  \}\
  \
  public static double atoi(String str) \{\
    //str = str.trim();\
    int index = str.indexOf('.');\
\
    if(index >= 0) \{\
      return atoiDec(str);\
    \} \
    return (double) atoiInt(str);\
  \}\
  \
  \
  /**\
   * boolean doTestsPass()\
   * Returns true if all tests pass. Otherwise returns false.\
   */\
  public static boolean doTestsPass()\
  \{\
      // todo: implement more tests, please\
      // feel free to make testing more elegant\
      System.out.println( "Negative number:" + atoi("-1234") );\
      System.out.println( "Positive number:" + atoi("1234") );\
      System.out.println( "Zero:" + atoi("0") );\
      System.out.println( "Empty Number:" + atoi("") );\
      System.out.println( "Invalid number:" + atoi("1234e56") );\
          \
      System.out.println( "Decimal number: " + atoi("1234.56") );\
\
      System.out.println( "Space number: " + atoi("  1234") );\
\
      return true;\
  \};\
\
\
      /**\
       * Execution entry point.\
       */\
  public static void main(String[] args) \{\
      if(doTestsPass())\
      \{\
        System.out.println("All tests pass");\
      \}\
      else\
      \{\
        System.out.println("There are test failures");\
      \}\
      System.out.println("End of program");\
  \}\
\}\
}