{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red24\green25\blue27;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c12549\c12941\c14118;\cssrgb\c100000\c100000\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh14820\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs34 \cf0 List of numbers and k\
Print non decrease subsequence of size k with minimum sum\
\
\pard\pardeftab720\sl400\partightenfactor0

\f1\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Int[] arr = [58 12 11 12 82 30 20 77 16 86]\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs34 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0  \
[11 12 16 ] \
\
\
int[][] dp = new int [n+1] [ k+1 ];\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
For int I = 0 ; I < n  ; I++ ) \{\
	dp[0] [ i ] = -1;\
\}\
for ( int j = 0 ; j < I ; j ++ ) \{\
	dp[j] [ 0 ] = -1;\
\}\
\
[ -1    -1   -1   -1 \
  -1 \
  -1\
  -1\
  -1\
  -1\
  -1\
  -1\
  -1\
  -1\
  -1\
  -1 \
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
findMinSum( arr, int i, int k ) \{\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 	Int ans= Integer.MAX_VALUE;\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 	IF( I < 0 ) \
		RETURN ANS;\
	if( k == 1 ) \{\
		for(int j = 0; j <= I; j++ ) \{\
			ans = Math.min(ans, arr[ j ])\
		\}\
		return ans\
	\}\
	\
	for ( int j = 0; j < i ; j ++ ) \{\
		if(arr[ j ] <= arr[ i ] ) \{\
			int tmp = Math.min( findMinSum(arr, j, k) , findMinSum(arr, j, k-1)   +arr[ j ] );\
			ans = Math.min(tmp, ans);\
		\} else \
			ans = Math.min( ans, findMinSum(arr, j, k) );\
		\}\
	\}\
	dp[ i ][ k ] = ans;\
	return dp[I][k];\
\}\
\
\
\
N =arr.length;\
findMinSum(arr, n, 3 );}