{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
 * Click `Run` to execute the snippet below!\
 */\
\
import java.io.*;\
import java.util.*;\
\
/*\
 * To execute Java, please define "static void main" on a class\
 * named Solution.\
 *\
 * If you need more classes, simply define them inline.\
 \
 \
 Given a Binary Tree, the task is for each level is to print the total number of nodes from all \
lower levels which are less than or equal to minimum valued node present at that level.\
\
Examples:\
\
Input: Below is the given tree:\
                           4\
                         /   \\\
                      3       5\
                    /  \\    /  \\\
                 10     2  3    1\
\
Output: 4 3 0\
Explanation:\
Nodes in level 1 has 4 nodes as (3) in level 2 and (2, 3, 1) in level 3. \
Nodes in level 2 has 3 nodes as (2, 3, 1) in level 3. \
Nodes in level 3 does not have any level left below it.\
\
while current level is not emty\
  1) Insert next level in a queue\
  2) Minimum in level also\
  \
  3) current the next level\
[ 4     3      1  \
[ [4], \
  [3,5], \
  [1,2,3,10] ]\
\
\
\
 */\
class Node \{\
  int val;\
  Node left, right;\
  Node(int v) \{\
    this.val = v;\
    this.left = null;\
    this.right = null;\
  \}\
\}\
\
      \
class Solution \{\
  \
  static void calculateNumMinNodes(Node root) \{\
    if(root == null)\
      return;\
    List<Node> current = new ArrayList<>();\
    current.add(root); \
    List<List<Node>> levels = new ArrayList<>();\
\
    levels.add(current);\
    \
    List<Integer>  min = new ArrayList<>();\
\
    min.add(root.val);\
    int level = 0;\
    while(!current.isEmpty()) \{\
      List<Node> next = new ArrayList<>(); // [3,5]\
      int nextMin = Integer.MAX_VALUE;\
      \
      for(Node n : current) \{\
        if(n.left != null) \{\
          next.add(n.left);\
          \
          if(n.left.val <= nextMin)\
            nextMin = n.left.val;\
        \}\
        \
        if(n.right != null) \{\
          next.add(n.right);\
        \
          if(n.right.val <= nextMin)\
            nextMin = n.right.val;\
        \}\
        \
      \}\
      System.out.println(next);\
      levels.add(next);\
      current = next;\
      min.add(nextMin);\
      level++;\
    \}\
    \
      \
    for(int i = 0; i < levels.size() - 1; i++ ) \{\
      int count = 0;\
      for(int j = i+1; j <levels.size(); j++ ) \{\
        List<Node> curr = levels.get(j);\
        for(Node c : curr) \{\
          if(c.val <= min.get(i)) \{\
            count++;\
          \}\
        \}\
      \}\
      System.out.println(count);\
    \}\
      \
    \
  \}\
  \
  public static void main(String[] args) \{\
    Node root = new Node(4);\
    root.left = new Node(3);\
    root.right = new Node(5);\
    root.left.left = new Node(1);\
    root.left.right = new Node(2);\
    root.right.left = new Node(3);\
    root.right.right = new Node(10);\
    \
    calculateNumMinNodes(root);\
    \
  \}\
  \
  \
  \
\}\
}