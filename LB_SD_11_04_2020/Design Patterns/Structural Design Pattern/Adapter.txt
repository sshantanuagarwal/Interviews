Adapter Pattern

- adapters are used when we have a class (Client) expecting some type of object (Interface) and we have an object (Adaptee) offering the same features but exposing a different interface.

- converts the interface of a class into another interface the clients expect. Adapter lets classes work together that couldn’t otherwise because of incompatible interfaces.

  client   --> (Adapter) --> Adaptee


  Example:

2 pin socket and 3 pin plug



public class Plug {            // 3pin plug

  private String spec;

  public Plug(){
     spec= '3 pin';
  }

  private String getInput(){
     return spec;
  }
}

--------------------
public interface Socket{           // 2 pin socket
     public String getInput();
}

public class  2PinSocket implements Socket{

  private String getInput(){
      return "2-Pin";
  }
}

---------------------

public class ExpansionAdapter  implement Socket , extends Plug{
    Socket socket = new 2PinSocket();

    public String getInput(){
        String input  = super.getInput();
        input = input + "power converted to" + socket.getInput();
        return input;
    }
}

-------------------
public class Client {

 private Socket socket;
  public void test(){
      socket  = new ExpansionAdapter();
      socket.getInput();
  }
}


********************************************

Example 2:

Suppose you have a Bird class with fly() , and makeSound()methods.
And also a ToyDuck class with squeak() method.

Let’s assume that you are short on ToyDuck objects and you would like to use Bird objects in their place.
Birds have some similar functionality but implement a different interface, so we can’t use them directly

interface Bird
{
    public void fly();
    public void makeSound();
}

class Sparrow implements Bird
{
    public void fly()
    {
        System.out.println("Flying");
    }

    public void makeSound()
    {
        System.out.println("Chirp Chirp");
    }
}




interface ToyDuck
{
    public void squeak();
}


class PlasticToyDuck implements ToyDuck
{
    public void squeak()
    {
        System.out.println("Squeak");
    }
}



class BirdAdapter implements ToyDuck, Bird
{
    Bird bird;

    public BirdAdapter(Bird bird)
    {
        this.bird = bird;
    }

    public void squeak()
    {
        bird.makeSound();
    }
}


class Main
{
    public static void main(String args[])
    {
        Bird sparrow = new Sparrow();

        ToyDuck toyDuck = new PlasticToyDuck();

        ToyDuck birdAdapter = new BirdAdapter(sparrow);

        System.out.println("Sparrow...");
        sparrow.fly();
        sparrow.makeSound();

        System.out.println("ToyDuck...");
        toyDuck.squeak();

        // toy duck behaving like a bird
        System.out.println("BirdAdapter...");
        birdAdapter.squeak();
    }
}

Sparrow...
 flying
 Chirp Chrip

ToyDuck ...
  squeak

BirdAdapter...
  Chrip Chirp
