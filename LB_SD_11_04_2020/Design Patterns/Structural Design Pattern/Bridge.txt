Bridge Design Pattern

The Bridge design pattern allows you to separate the abstraction from the implementation.It is a structural design pattern.
There are 2 parts in Bridge design pattern :
   - Abstraction
   - Implementation

-> decoupling the interface with

Example

Animal
  - person : walk
  - fish   : swim
  - bird   : fly


Animal
  -move()

    person
      -move()  // walking

    fish
      -move()  // swimming

    bird
      -move()  // flying



**********

interface Workshop
{
    abstract public void work();
}


class Produce implements Workshop {

    public void work()
    {
        System.out.print("Produced");
    }
}

class Assemble implements Workshop {

    public void work()
    {
        System.out.print(" And");
        System.out.println(" Assembled.");
    }
}


abstract class Vehicle {
    protected Workshop workShop1;
    protected Workshop workShop2;

    protected Vehicle(Workshop workShop1, Workshop workShop2)
    {
        this.workShop1 = workShop1;
        this.workShop2 = workShop2;
    }

    abstract public void manufacture();
}


class Bus extends Vehicle {
    public Bus(Workshop workShop1, Workshop workShop2)
    {
        super(workShop1, workShop2);
    }


    public void manufacture()
    {
        System.out.print("Bus ");
        workShop1.work();
        workShop2.work();
    }
}


class Bike extends Vehicle {
    public Bike(Workshop workShop1, Workshop workShop2)
    {
        super(workShop1, workShop2);
    }

    public void manufacture()
    {
        System.out.print("Bike ");
        workShop1.work();
        workShop2.work();
    }
}



class client {
    public static void main(String[] args)
    {
        Workshop workShop1 = new Produce();
        Workshop workShop2 = new Assemble();

        Vehicle vehicle1 = new Bus(workShop1,workShop2);
        vehicle1.manufacture();

        Vehicle vehicle2 = new Bike(workShop1, workShop2);
        vehicle2.manufacture();
    }
}
