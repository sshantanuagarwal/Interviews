Builder design pattern

- Separate the construction of a complex object from its representation
so that the same construction process can create different representations.

- The Builder pattern allows the creation of different representations of an object using the same construction code.

Example:
Pizza
  - dough
  - sauce
  - toppings

Pizza(dough, sauce , toppings){

}

constructor telescopig

The Builder patternâ€™s main intent is to have the minimum number of overloading constructors to support the constuction of several representations of an object.

Example:
*******************************************************

#include <iostream>
#include <memory>     // unique_ptr
using namespace std;
class Pizza_Product
{

  public:
    void setDough(const string& dough) { m_dough = dough; }
    void setSauce(const string& sauce) { m_sauce = sauce; }
    void setTopping(const string& topping) { m_topping = topping; }

void taste() const
{
  cout << "Pizza with " << m_dough << " dough, "
       << m_sauce << " sauce and "
       << m_topping << " topping. Mmmmmmm." << endl;
}

private:
 string m_dough;
 string m_sauce;
 string m_topping;
};


*******************************************************
class Pizza_Builder
{
public:
  virtual ~Pizza_Builder() {};

  Pizza_Product* getPizza(){ return m_pizza.taste(); }

  void createNewPizzaProduct()
  {
    m_pizza = make_unique<Pizza_Product>();
  }

  virtual void buildDough() = 0;

  virtual void buildSauce() = 0;

  virtual void buildTop()   = 0;

protected:
  unique_ptr<Pizza_Product> m_pizza; // Pizza pizzaObj
};


class Margherita_ConcreteBuilder : public Pizza_Builder
{
public:
 virtual void buildDough() { m_pizza->setDough("cross"); }
 virtual void buildSauce() { m_pizza->setSauce("tomato"); }
 virtual void buildTop() { m_pizza->setTopping("mozzarela+basil"); }
};


class Spicy_ConcreteBuilder : public Pizza_Builder
{
public:
 virtual void buildDough() { m_pizza->setDough("pan baked"); }
 virtual void buildSauce() { m_pizza->setSauce("tomato+chilli"); }
 virtual void buildTop(){ m_pizza->setTopping("pepperoni+salami"); }
};

*******************************************************

class Cook_Director
{
public:
 void tastePizza(){ m_pizzaBuilder->getPizza()->taste(); }

void makePizza(Pizza_Builder* pb)
 {
   m_pizzaBuilder = pb;

   m_pizzaBuilder->createNewPizzaProduct();
   m_pizzaBuilder->buildDough();
   m_pizzaBuilder->buildSauce();
   m_pizzaBuilder->buildTop();
 }
private:
 Pizza_Builder* m_pizzaBuilder;
};

**********************************************

int main()
{
  Cook_Director               cook;

  Margherita_ConcreteBuilder  margheritaBuilder;

  Spicy_ConcreteBuilder       spicyPizzaBuilder;

  cook.makePizza(&margheritaBuilder);
  cook.tastePizza();

  cook.makePizza(&spicyPizzaBuilder);
  cook.tastePizza();
}

// Output
// Pizza with cross dough, tomato sauce and mozzarela+basil topping. // Mmmmmmm.
// Pizza with pan baked dough, tomato+chilli sauce and
// pepperoni+salami topping. Mmmmmmm.
