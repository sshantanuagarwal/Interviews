{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
 * Click `Run` to execute the snippet below!\
 */\
\
import java.io.*;\
import java.util.*;\
\
/*\
 * To execute Java, please define "static void main" on a class\
 * named Solution.\
 *\
 * If you need more classes, simply define them inline.\
 */\
\
class Solution \{\
  public static void main(String[] args) \{\
    ArrayList<String> strings = new ArrayList<String>();\
    strings.add("Hello, World!");\
    strings.add("Welcome to CoderPad.");\
    strings.add("This pad is running Java " + Runtime.version().feature());\
\
    for (String string : strings) \{\
      System.out.println(string);\
    \}\
  \}\
\}\
\
\
// T0 wm = new WindowedMap(5)\
// T0 wm.put("foo", 1)\
// T2 wm.get("foo") -> 1\
// T2 wm.put("bar", 2)\
// t2 wm.put("foo", 2)\
// T6 wm.get("foo") -> 2\
// T6 wm.get("bar") -> 2\
\
public class WindowedMap \{\
  private Map<String, Long> map;\
  private Map<String, Long> timeMap;\
  private long oldestTime;\
  private long lastAverageTime;\
  private long widthMs;\
  private long sum;\
  private long count;\
  private final ReadWrite rwLock = new ReadWriteLock();\
  \
  WindowedMap(long widthMs) \{\
    this.oldestTime = 0;\
    this.lastAverageTime = 0;\
    this.widthMs = widthMs;\
    this.map = new LinkedHashMap<>();\
    this.timeMap = new LinkedHashMap<>();\
    this.sum = 0;\
    this.count = 0;\
  \}\
\
  void deleteData() \{\
    this.rwLock.writeLock().lock(); \
    \
    long currentTime = System.currentTimeMillis();\
    Set<String> removedKeys = new HashSet<>();\
    \
    for(Entry<String, Long> e :  timeMap.entrySet()) \{\
      String key = e.getKey();\
      if(e.getValue() < currentTime - this.widthMs) \{\
        \
        this.sum -= map.get(key);\
        this.count -= 1;\
        \
        map.remove(key);\
        removedKeys.add(key);\
        this.sum -= map.get(key);\
      \} else \{\
        this.oldestTime = e.getValue();\
        break;\
      \}\
    \}\
    for(String key : removedKeys ) \{\
      timeMap.remove(key);\
    \}\
    \
    this.rwLock.writeLock().unlock(); \
    \
  \}\
\
  /** puts or replaces a previous key value pairing */\
  void put(String key, long value) \{\
    this.rwLock.writeLock().lock(); \
\
    long currentTime = System.currentTimeMillis();\
    if(map.containsKey(key)) \{\
\
      this.sum -= map.get(key);\
      this.count -= 1;\
      \
      map.remove(key);\
      timeMap.remove(key);\
    \}\
    \
    this.sum += value;\
    this.count += 1;\
        \
    map.put(key,value);\
    timeMap.put(key,currentTime);\
    \
    if(oldestTime == 0) \{\
      oldestTime = currentTime;\
    \}\
    \
    if(currentTime - this.oldestTime > this.widthMs) \{\
      deleteData();\
    \}\
    \
    this.rwLock.writeLock.unlock();\
  \}\
\
  /** gets the most recent value for the key */\
  long get(String key) \{\
    this.rwLock.readLock().lock(); \
    long currentTime = System.currentTimeMillis();\
\
    if(currentTime - this.oldestTime > this.widthMs) \{\
      deleteData();\
    \}\
    \
    Long val = map.get(key);\
    \
    this.rwLock.readLock.unlock(); \
    \
    if(currentTime - timeMap.get(key) > this.widthMs ) \{\
      return null;\
    \}\
    \
    return val;\
  \}\
\
  /** gets the average for all values within the window */\
  double getAverage() \{\
    \
    this.rwLock.readLock().lock(); \
    \
    if(currentTime - this.oldestTime > this.widthMs) \{\
      deleteData();\
    \}\
    \
    return this.sum / this.count;\
  \}\
\}}