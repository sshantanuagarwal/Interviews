{\rtf1\ansi\ansicpg1252\cocoartf2512
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Q1. You are given a BST, transform the BST such that all nodes have elements greater than sum of elements greater than it.\
\
I/P:\
       5\
    3    7\
     4     8\
     \
Expected O/P:    \
\
          15\
    24       8\
      20       0     \
      \
/*\
I/p -> In order : 3  4  5     7           8  -> Left Root Right\
Rev In (sum              8+7+5    8+7   8  0        Right Root Left\
O/p ->           24        20    15    8  0\
class Node() \{\
    int data;\
    Node * left;\
    Node *right;\
\}\
\
Time Complexity( single Traversal ) : O( n )\
Space Complexity                    : O( 1 ) Apart from recursive stack\
\
*/\
\
void transformBSTUtil( Node *root, int *sum ) \{\
    if( !root )\
        return;\
    \
    transformBSTUtil( root->right, sum );\
    \
    int d = root->data;\
    root->data = *sum;\
    *sum += d;\
    \
    transformBSTUtil( root->left, sum );\
\}\
\
Node * transformBST( Node *root )\{\
    if( !root )\
        return root;\
    int sum = 0;\
    transformBSTUtil( root, &sum );\
    return root;\
\}\
\
class main( ) \{\
    createTree();\
\}\
\
i/p:\
     8\
Null   Null\
\
o/p:\
     0\
Null   Null\
\
\
Q2. You have given N number of tasks, each task has a deadline associated with it, and the profit gained on completing the task.\
Your manager asks you to complete maximum possible tasks such that maximum profit can be achieved.\
Each task takes one unit of time only. Only one task can be done at a time.\
\
Task    Deadline (day)     Profit\
 1       2                   20\
 2       1                   4\
 3       2                   6\
 4       1                   5\
 5       3                   3\
 \
YA: 4, 1, 5 => 5 + 20 + 3 = 28\
AA: 3, 1, 5 => 6 + 20 + 3 = 29\
\
                  \{1,2,3,4,5 \}\
Day 1 : 1 -> 20   \{3,5\}\
Day 2 : 3 -> 6    \{5\} \
Day 3 : 5 -> 3   \
\
Task    Deadline (day)     Profit\
 1       2                   20\
 2       1                   4\
 3       1                   6\
 4       2                   5\
 5       3                   3\
 6       1                   18\
 \
YA: 1, 4, 5\
3,1,5\
\
20, 18, 6, 5, 4, 3\
2\
\
def maxProfit( tasks, deadlines, profits ):\
    m = \{\}\
    c = 0\
    for t in tasks:\
        m[ ( deadline[ c ], profits[ c ] ) ] = t\
        c += 1\
        \
    sorted( m.keys(), lambda x,y  : x[ 1 ]  > y[ 1 ] || ( x[ 1 ] == y [ 1 ] && x [ 0 ] < y[ 0 ] ) )\
    //  2  1 1 2 1 3\
    // 20 18 6 5 4 3\
    \
    //  1  2 1 2 1 3\
    // 20 20 6 5 4 3\
    \
    //  2  2 2 2 2 3 (this)\
    // 20 20 6 5 4 3\
    \
    //sorted( m.keys(), lambda x,y  :  )\
    // 1  1 1  2 2 3\
    // 18 6 4 20 5 3\
\
    numDays = max( deadlines )\
    \
    maxProfitDict = \{\}\
    for i in range( numDays  ):\
        maxProfitDict[ i + 1 ] = 0\
    \
    for (d, p) in m.keys():\
        c = d\
        while c > 0   \
            if p > maxProfitDict[ c ] :\
                maxProfitDict[ c ] = p\
                break\
            c--;\
    \
    return sum( maxProfitDict.values() )\
    \
}